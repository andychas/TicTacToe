//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicTacToe.Client.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string First_NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Last_NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string First_Name {
            get {
                return this.First_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.First_NameField, value) != true)) {
                    this.First_NameField = value;
                    this.RaisePropertyChanged("First_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Last_Name {
            get {
                return this.Last_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Last_NameField, value) != true)) {
                    this.Last_NameField = value;
                    this.RaisePropertyChanged("Last_Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameMove", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class GameMove : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> Game_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> colField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> rowField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Game_Id {
            get {
                return this.Game_IdField;
            }
            set {
                if ((this.Game_IdField.Equals(value) != true)) {
                    this.Game_IdField = value;
                    this.RaisePropertyChanged("Game_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sign {
            get {
                return this.SignField;
            }
            set {
                if ((object.ReferenceEquals(this.SignField, value) != true)) {
                    this.SignField = value;
                    this.RaisePropertyChanged("Sign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> col {
            get {
                return this.colField;
            }
            set {
                if ((this.colField.Equals(value) != true)) {
                    this.colField = value;
                    this.RaisePropertyChanged("col");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> row {
            get {
                return this.rowField;
            }
            set {
                if ((this.rowField.Equals(value) != true)) {
                    this.rowField = value;
                    this.RaisePropertyChanged("row");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Game", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Game : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> Board_SizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ChapmpionshipField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Player1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Player2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Board_Size {
            get {
                return this.Board_SizeField;
            }
            set {
                if ((this.Board_SizeField.Equals(value) != true)) {
                    this.Board_SizeField = value;
                    this.RaisePropertyChanged("Board_Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Chapmpionship {
            get {
                return this.ChapmpionshipField;
            }
            set {
                if ((this.ChapmpionshipField.Equals(value) != true)) {
                    this.ChapmpionshipField = value;
                    this.RaisePropertyChanged("Chapmpionship");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Player1 {
            get {
                return this.Player1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player1Field, value) != true)) {
                    this.Player1Field = value;
                    this.RaisePropertyChanged("Player1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Player2 {
            get {
                return this.Player2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player2Field, value) != true)) {
                    this.Player2Field = value;
                    this.RaisePropertyChanged("Player2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Advisor", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Advisor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string First_NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Last_NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string First_Name {
            get {
                return this.First_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.First_NameField, value) != true)) {
                    this.First_NameField = value;
                    this.RaisePropertyChanged("First_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Last_Name {
            get {
                return this.Last_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Last_NameField, value) != true)) {
                    this.Last_NameField = value;
                    this.RaisePropertyChanged("Last_Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Championship", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Championship : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> End_dateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> Start_dateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> End_date {
            get {
                return this.End_dateField;
            }
            set {
                if ((this.End_dateField.Equals(value) != true)) {
                    this.End_dateField = value;
                    this.RaisePropertyChanged("End_date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Start_date {
            get {
                return this.Start_dateField;
            }
            set {
                if ((this.Start_dateField.Equals(value) != true)) {
                    this.Start_dateField = value;
                    this.RaisePropertyChanged("Start_date");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomChampionship", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CustomChampionship : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int numOfChampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string city {
            get {
                return this.cityField;
            }
            set {
                if ((object.ReferenceEquals(this.cityField, value) != true)) {
                    this.cityField = value;
                    this.RaisePropertyChanged("city");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int numOfChamp {
            get {
                return this.numOfChampField;
            }
            set {
                if ((this.numOfChampField.Equals(value) != true)) {
                    this.numOfChampField = value;
                    this.RaisePropertyChanged("numOfChamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomPlayer", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CustomPlayer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int numOfGamesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int numOfGames {
            get {
                return this.numOfGamesField;
            }
            set {
                if ((this.numOfGamesField.Equals(value) != true)) {
                    this.numOfGamesField = value;
                    this.RaisePropertyChanged("numOfGames");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomAdvisorToPlayer", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CustomAdvisorToPlayer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string advisorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string playerNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string advisorName {
            get {
                return this.advisorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.advisorNameField, value) != true)) {
                    this.advisorNameField = value;
                    this.RaisePropertyChanged("advisorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string playerName {
            get {
                return this.playerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.playerNameField, value) != true)) {
                    this.playerNameField = value;
                    this.RaisePropertyChanged("playerName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService", CallbackContract=typeof(TicTacToe.Client.ServiceReference1.IServiceCallback))]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterClient", ReplyAction="http://tempuri.org/IService/RegisterClientResponse")]
        bool RegisterClient(TicTacToe.Client.ServiceReference1.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterClient", ReplyAction="http://tempuri.org/IService/RegisterClientResponse")]
        System.Threading.Tasks.Task<bool> RegisterClientAsync(TicTacToe.Client.ServiceReference1.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddPlayer", ReplyAction="http://tempuri.org/IService/AddPlayerResponse")]
        TicTacToe.Client.ServiceReference1.Player AddPlayer(string firstName, string lastName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddPlayer", ReplyAction="http://tempuri.org/IService/AddPlayerResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Player> AddPlayerAsync(string firstName, string lastName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewTurn", ReplyAction="http://tempuri.org/IService/NewTurnResponse")]
        string NewTurn(int col, int row);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewTurn", ReplyAction="http://tempuri.org/IService/NewTurnResponse")]
        System.Threading.Tasks.Task<string> NewTurnAsync(int col, int row);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/SendGameMove")]
        void SendGameMove(TicTacToe.Client.ServiceReference1.Player p1, TicTacToe.Client.ServiceReference1.Player p2, char sign, int col, int row, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/SendGameMove")]
        System.Threading.Tasks.Task SendGameMoveAsync(TicTacToe.Client.ServiceReference1.Player p1, TicTacToe.Client.ServiceReference1.Player p2, char sign, int col, int row, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GameInfo", ReplyAction="http://tempuri.org/IService/GameInfoResponse")]
        void GameInfo(int size, string option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GameInfo", ReplyAction="http://tempuri.org/IService/GameInfoResponse")]
        System.Threading.Tasks.Task GameInfoAsync(int size, string option);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddMove", ReplyAction="http://tempuri.org/IService/AddMoveResponse")]
        void AddMove(int gameId, string sign, int row, int col);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddMove", ReplyAction="http://tempuri.org/IService/AddMoveResponse")]
        System.Threading.Tasks.Task AddMoveAsync(int gameId, string sign, int row, int col);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRecordGameId", ReplyAction="http://tempuri.org/IService/GetRecordGameIdResponse")]
        int[] GetRecordGameId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRecordGameId", ReplyAction="http://tempuri.org/IService/GetRecordGameIdResponse")]
        System.Threading.Tasks.Task<int[]> GetRecordGameIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGameMoves", ReplyAction="http://tempuri.org/IService/GetGameMovesResponse")]
        TicTacToe.Client.ServiceReference1.GameMove[] GetGameMoves(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGameMoves", ReplyAction="http://tempuri.org/IService/GetGameMovesResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.GameMove[]> GetGameMovesAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IfWinner", ReplyAction="http://tempuri.org/IService/IfWinnerResponse")]
        bool IfWinner(string sign, int row, int col);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IfWinner", ReplyAction="http://tempuri.org/IService/IfWinnerResponse")]
        System.Threading.Tasks.Task<bool> IfWinnerAsync(string sign, int row, int col);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ResetGame", ReplyAction="http://tempuri.org/IService/ResetGameResponse")]
        void ResetGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ResetGame", ReplyAction="http://tempuri.org/IService/ResetGameResponse")]
        System.Threading.Tasks.Task ResetGameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPlayer", ReplyAction="http://tempuri.org/IService/GetPlayerResponse")]
        TicTacToe.Client.ServiceReference1.Player GetPlayer(string firstName, string lastName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPlayer", ReplyAction="http://tempuri.org/IService/GetPlayerResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Player> GetPlayerAsync(string firstName, string lastName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPlayers", ReplyAction="http://tempuri.org/IService/GetPlayersResponse")]
        TicTacToe.Client.ServiceReference1.Player[] GetPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPlayers", ReplyAction="http://tempuri.org/IService/GetPlayersResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Player[]> GetPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOnlinePlayers", ReplyAction="http://tempuri.org/IService/GetOnlinePlayersResponse")]
        TicTacToe.Client.ServiceReference1.Player[] GetOnlinePlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOnlinePlayers", ReplyAction="http://tempuri.org/IService/GetOnlinePlayersResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Player[]> GetOnlinePlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllGamePlayer", ReplyAction="http://tempuri.org/IService/GetAllGamePlayerResponse")]
        TicTacToe.Client.ServiceReference1.Player[] GetAllGamePlayer(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllGamePlayer", ReplyAction="http://tempuri.org/IService/GetAllGamePlayerResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Player[]> GetAllGamePlayerAsync(string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSizeGame", ReplyAction="http://tempuri.org/IService/GetSizeGameResponse")]
        int GetSizeGame(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSizeGame", ReplyAction="http://tempuri.org/IService/GetSizeGameResponse")]
        System.Threading.Tasks.Task<int> GetSizeGameAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGames", ReplyAction="http://tempuri.org/IService/GetGamesResponse")]
        TicTacToe.Client.ServiceReference1.Game[] GetGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGames", ReplyAction="http://tempuri.org/IService/GetGamesResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Game[]> GetGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPlayerGamesQuery", ReplyAction="http://tempuri.org/IService/GetPlayerGamesQueryResponse")]
        TicTacToe.Client.ServiceReference1.Game[] GetPlayerGamesQuery(TicTacToe.Client.ServiceReference1.Player player, int delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPlayerGamesQuery", ReplyAction="http://tempuri.org/IService/GetPlayerGamesQueryResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Game[]> GetPlayerGamesQueryAsync(TicTacToe.Client.ServiceReference1.Player player, int delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddAdvisor", ReplyAction="http://tempuri.org/IService/AddAdvisorResponse")]
        void AddAdvisor(TicTacToe.Client.ServiceReference1.Player player, TicTacToe.Client.ServiceReference1.Advisor[] advisors, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddAdvisor", ReplyAction="http://tempuri.org/IService/AddAdvisorResponse")]
        System.Threading.Tasks.Task AddAdvisorAsync(TicTacToe.Client.ServiceReference1.Player player, TicTacToe.Client.ServiceReference1.Advisor[] advisors, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetChampionships", ReplyAction="http://tempuri.org/IService/GetChampionshipsResponse")]
        TicTacToe.Client.ServiceReference1.Championship[] GetChampionships();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetChampionships", ReplyAction="http://tempuri.org/IService/GetChampionshipsResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Championship[]> GetChampionshipsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllChampionships", ReplyAction="http://tempuri.org/IService/GetAllChampionshipsResponse")]
        TicTacToe.Client.ServiceReference1.Championship[] GetAllChampionships();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllChampionships", ReplyAction="http://tempuri.org/IService/GetAllChampionshipsResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Championship[]> GetAllChampionshipsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllChampionshipsQuery", ReplyAction="http://tempuri.org/IService/GetAllChampionshipsQueryResponse")]
        TicTacToe.Client.ServiceReference1.Championship[] GetAllChampionshipsQuery(int delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllChampionshipsQuery", ReplyAction="http://tempuri.org/IService/GetAllChampionshipsQueryResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Championship[]> GetAllChampionshipsQueryAsync(int delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGamesQuery", ReplyAction="http://tempuri.org/IService/GetGamesQueryResponse")]
        TicTacToe.Client.ServiceReference1.Game[] GetGamesQuery(int delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGamesQuery", ReplyAction="http://tempuri.org/IService/GetGamesQueryResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Game[]> GetGamesQueryAsync(int delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPlayersQuery", ReplyAction="http://tempuri.org/IService/GetPlayersQueryResponse")]
        TicTacToe.Client.ServiceReference1.Player[] GetPlayersQuery(int delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPlayersQuery", ReplyAction="http://tempuri.org/IService/GetPlayersQueryResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Player[]> GetPlayersQueryAsync(int delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetChampionshipsByPlayerId", ReplyAction="http://tempuri.org/IService/GetChampionshipsByPlayerIdResponse")]
        TicTacToe.Client.ServiceReference1.Championship[] GetChampionshipsByPlayerId(TicTacToe.Client.ServiceReference1.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetChampionshipsByPlayerId", ReplyAction="http://tempuri.org/IService/GetChampionshipsByPlayerIdResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Championship[]> GetChampionshipsByPlayerIdAsync(TicTacToe.Client.ServiceReference1.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPlayersByChampionshipId", ReplyAction="http://tempuri.org/IService/GetPlayersByChampionshipIdResponse")]
        TicTacToe.Client.ServiceReference1.Player[] GetPlayersByChampionshipId(int champId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPlayersByChampionshipId", ReplyAction="http://tempuri.org/IService/GetPlayersByChampionshipIdResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Player[]> GetPlayersByChampionshipIdAsync(int champId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllCities", ReplyAction="http://tempuri.org/IService/GetAllCitiesResponse")]
        string[] GetAllCities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllCities", ReplyAction="http://tempuri.org/IService/GetAllCitiesResponse")]
        System.Threading.Tasks.Task<string[]> GetAllCitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNumOfChampionships", ReplyAction="http://tempuri.org/IService/GetNumOfChampionshipsResponse")]
        TicTacToe.Client.ServiceReference1.CustomChampionship GetNumOfChampionships(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNumOfChampionships", ReplyAction="http://tempuri.org/IService/GetNumOfChampionshipsResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.CustomChampionship> GetNumOfChampionshipsAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNumOfGames", ReplyAction="http://tempuri.org/IService/GetNumOfGamesResponse")]
        TicTacToe.Client.ServiceReference1.CustomPlayer GetNumOfGames(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNumOfGames", ReplyAction="http://tempuri.org/IService/GetNumOfGamesResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.CustomPlayer> GetNumOfGamesAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAdvisorToPlayer", ReplyAction="http://tempuri.org/IService/GetAdvisorToPlayerResponse")]
        TicTacToe.Client.ServiceReference1.CustomAdvisorToPlayer[] GetAdvisorToPlayer(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAdvisorToPlayer", ReplyAction="http://tempuri.org/IService/GetAdvisorToPlayerResponse")]
        System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.CustomAdvisorToPlayer[]> GetAdvisorToPlayerAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddChampionship", ReplyAction="http://tempuri.org/IService/AddChampionshipResponse")]
        int AddChampionship(System.DateTime start, System.DateTime end, string city, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddChampionship", ReplyAction="http://tempuri.org/IService/AddChampionshipResponse")]
        System.Threading.Tasks.Task<int> AddChampionshipAsync(System.DateTime start, System.DateTime end, string city, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateChampionship", ReplyAction="http://tempuri.org/IService/UpdateChampionshipResponse")]
        void UpdateChampionship(int id, System.DateTime start, System.DateTime end, string city, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateChampionship", ReplyAction="http://tempuri.org/IService/UpdateChampionshipResponse")]
        System.Threading.Tasks.Task UpdateChampionshipAsync(int id, System.DateTime start, System.DateTime end, string city, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/UpdatePlayerChampionships")]
        void UpdatePlayerChampionships(TicTacToe.Client.ServiceReference1.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/UpdatePlayerChampionships")]
        System.Threading.Tasks.Task UpdatePlayerChampionshipsAsync(TicTacToe.Client.ServiceReference1.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddPlayerToChamp", ReplyAction="http://tempuri.org/IService/AddPlayerToChampResponse")]
        void AddPlayerToChamp(TicTacToe.Client.ServiceReference1.Player player, int champId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddPlayerToChamp", ReplyAction="http://tempuri.org/IService/AddPlayerToChampResponse")]
        System.Threading.Tasks.Task AddPlayerToChampAsync(TicTacToe.Client.ServiceReference1.Player player, int champId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemovePlayerToChampionship", ReplyAction="http://tempuri.org/IService/RemovePlayerToChampionshipResponse")]
        void RemovePlayerToChampionship(TicTacToe.Client.ServiceReference1.Player player, int champId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemovePlayerToChampionship", ReplyAction="http://tempuri.org/IService/RemovePlayerToChampionshipResponse")]
        System.Threading.Tasks.Task RemovePlayerToChampionshipAsync(TicTacToe.Client.ServiceReference1.Player player, int champId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddGame", ReplyAction="http://tempuri.org/IService/AddGameResponse")]
        int AddGame(int champId, TicTacToe.Client.ServiceReference1.Player player1, TicTacToe.Client.ServiceReference1.Player player2, int boardSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddGame", ReplyAction="http://tempuri.org/IService/AddGameResponse")]
        System.Threading.Tasks.Task<int> AddGameAsync(int champId, TicTacToe.Client.ServiceReference1.Player player1, TicTacToe.Client.ServiceReference1.Player player2, int boardSize);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/AddGameToPlayer")]
        void AddGameToPlayer(int gameId, TicTacToe.Client.ServiceReference1.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/AddGameToPlayer")]
        System.Threading.Tasks.Task AddGameToPlayerAsync(int gameId, TicTacToe.Client.ServiceReference1.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/AskPlayerConfirmation")]
        void AskPlayerConfirmation(int gameSize, TicTacToe.Client.ServiceReference1.Player player1, TicTacToe.Client.ServiceReference1.Player player2, bool confirmationRequired, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/AskPlayerConfirmation")]
        System.Threading.Tasks.Task AskPlayerConfirmationAsync(int gameSize, TicTacToe.Client.ServiceReference1.Player player1, TicTacToe.Client.ServiceReference1.Player player2, bool confirmationRequired, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/playerConfirmed")]
        void playerConfirmed(TicTacToe.Client.ServiceReference1.Player player1, TicTacToe.Client.ServiceReference1.Player player2);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/playerConfirmed")]
        System.Threading.Tasks.Task playerConfirmedAsync(TicTacToe.Client.ServiceReference1.Player player1, TicTacToe.Client.ServiceReference1.Player player2);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/removeClient")]
        void removeClient();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/removeClient")]
        System.Threading.Tasks.Task removeClientAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DelayResponse", ReplyAction="http://tempuri.org/IService/DelayResponseResponse")]
        void DelayResponse(int delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DelayResponse", ReplyAction="http://tempuri.org/IService/DelayResponseResponse")]
        System.Threading.Tasks.Task DelayResponseAsync(int delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/CancelGame")]
        void CancelGame(TicTacToe.Client.ServiceReference1.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/CancelGame")]
        System.Threading.Tasks.Task CancelGameAsync(TicTacToe.Client.ServiceReference1.Player player);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/UpdateClientBoard")]
        void UpdateClientBoard(int col, int row);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/ConfirmPlayer")]
        void ConfirmPlayer(int gameSize, TicTacToe.Client.ServiceReference1.Player player1, TicTacToe.Client.ServiceReference1.Player player2, bool confirmationRequired, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/StartGame")]
        void StartGame(bool isYourTurn, char sign);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/MakeYourTurn")]
        void MakeYourTurn(int row, int col);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/GameWon")]
        void GameWon(string sign);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/GameTied")]
        void GameTied();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/GameCanceled")]
        void GameCanceled();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : TicTacToe.Client.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<TicTacToe.Client.ServiceReference1.IService>, TicTacToe.Client.ServiceReference1.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool RegisterClient(TicTacToe.Client.ServiceReference1.Player player) {
            return base.Channel.RegisterClient(player);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterClientAsync(TicTacToe.Client.ServiceReference1.Player player) {
            return base.Channel.RegisterClientAsync(player);
        }
        
        public TicTacToe.Client.ServiceReference1.Player AddPlayer(string firstName, string lastName) {
            return base.Channel.AddPlayer(firstName, lastName);
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Player> AddPlayerAsync(string firstName, string lastName) {
            return base.Channel.AddPlayerAsync(firstName, lastName);
        }
        
        public string NewTurn(int col, int row) {
            return base.Channel.NewTurn(col, row);
        }
        
        public System.Threading.Tasks.Task<string> NewTurnAsync(int col, int row) {
            return base.Channel.NewTurnAsync(col, row);
        }
        
        public void SendGameMove(TicTacToe.Client.ServiceReference1.Player p1, TicTacToe.Client.ServiceReference1.Player p2, char sign, int col, int row, int gameId) {
            base.Channel.SendGameMove(p1, p2, sign, col, row, gameId);
        }
        
        public System.Threading.Tasks.Task SendGameMoveAsync(TicTacToe.Client.ServiceReference1.Player p1, TicTacToe.Client.ServiceReference1.Player p2, char sign, int col, int row, int gameId) {
            return base.Channel.SendGameMoveAsync(p1, p2, sign, col, row, gameId);
        }
        
        public void GameInfo(int size, string option) {
            base.Channel.GameInfo(size, option);
        }
        
        public System.Threading.Tasks.Task GameInfoAsync(int size, string option) {
            return base.Channel.GameInfoAsync(size, option);
        }
        
        public void AddMove(int gameId, string sign, int row, int col) {
            base.Channel.AddMove(gameId, sign, row, col);
        }
        
        public System.Threading.Tasks.Task AddMoveAsync(int gameId, string sign, int row, int col) {
            return base.Channel.AddMoveAsync(gameId, sign, row, col);
        }
        
        public int[] GetRecordGameId() {
            return base.Channel.GetRecordGameId();
        }
        
        public System.Threading.Tasks.Task<int[]> GetRecordGameIdAsync() {
            return base.Channel.GetRecordGameIdAsync();
        }
        
        public TicTacToe.Client.ServiceReference1.GameMove[] GetGameMoves(int gameId) {
            return base.Channel.GetGameMoves(gameId);
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.GameMove[]> GetGameMovesAsync(int gameId) {
            return base.Channel.GetGameMovesAsync(gameId);
        }
        
        public bool IfWinner(string sign, int row, int col) {
            return base.Channel.IfWinner(sign, row, col);
        }
        
        public System.Threading.Tasks.Task<bool> IfWinnerAsync(string sign, int row, int col) {
            return base.Channel.IfWinnerAsync(sign, row, col);
        }
        
        public void ResetGame() {
            base.Channel.ResetGame();
        }
        
        public System.Threading.Tasks.Task ResetGameAsync() {
            return base.Channel.ResetGameAsync();
        }
        
        public TicTacToe.Client.ServiceReference1.Player GetPlayer(string firstName, string lastName) {
            return base.Channel.GetPlayer(firstName, lastName);
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Player> GetPlayerAsync(string firstName, string lastName) {
            return base.Channel.GetPlayerAsync(firstName, lastName);
        }
        
        public TicTacToe.Client.ServiceReference1.Player[] GetPlayers() {
            return base.Channel.GetPlayers();
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Player[]> GetPlayersAsync() {
            return base.Channel.GetPlayersAsync();
        }
        
        public TicTacToe.Client.ServiceReference1.Player[] GetOnlinePlayers() {
            return base.Channel.GetOnlinePlayers();
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Player[]> GetOnlinePlayersAsync() {
            return base.Channel.GetOnlinePlayersAsync();
        }
        
        public TicTacToe.Client.ServiceReference1.Player[] GetAllGamePlayer(string gameId) {
            return base.Channel.GetAllGamePlayer(gameId);
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Player[]> GetAllGamePlayerAsync(string gameId) {
            return base.Channel.GetAllGamePlayerAsync(gameId);
        }
        
        public int GetSizeGame(int gameId) {
            return base.Channel.GetSizeGame(gameId);
        }
        
        public System.Threading.Tasks.Task<int> GetSizeGameAsync(int gameId) {
            return base.Channel.GetSizeGameAsync(gameId);
        }
        
        public TicTacToe.Client.ServiceReference1.Game[] GetGames() {
            return base.Channel.GetGames();
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Game[]> GetGamesAsync() {
            return base.Channel.GetGamesAsync();
        }
        
        public TicTacToe.Client.ServiceReference1.Game[] GetPlayerGamesQuery(TicTacToe.Client.ServiceReference1.Player player, int delay) {
            return base.Channel.GetPlayerGamesQuery(player, delay);
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Game[]> GetPlayerGamesQueryAsync(TicTacToe.Client.ServiceReference1.Player player, int delay) {
            return base.Channel.GetPlayerGamesQueryAsync(player, delay);
        }
        
        public void AddAdvisor(TicTacToe.Client.ServiceReference1.Player player, TicTacToe.Client.ServiceReference1.Advisor[] advisors, int gameId) {
            base.Channel.AddAdvisor(player, advisors, gameId);
        }
        
        public System.Threading.Tasks.Task AddAdvisorAsync(TicTacToe.Client.ServiceReference1.Player player, TicTacToe.Client.ServiceReference1.Advisor[] advisors, int gameId) {
            return base.Channel.AddAdvisorAsync(player, advisors, gameId);
        }
        
        public TicTacToe.Client.ServiceReference1.Championship[] GetChampionships() {
            return base.Channel.GetChampionships();
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Championship[]> GetChampionshipsAsync() {
            return base.Channel.GetChampionshipsAsync();
        }
        
        public TicTacToe.Client.ServiceReference1.Championship[] GetAllChampionships() {
            return base.Channel.GetAllChampionships();
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Championship[]> GetAllChampionshipsAsync() {
            return base.Channel.GetAllChampionshipsAsync();
        }
        
        public TicTacToe.Client.ServiceReference1.Championship[] GetAllChampionshipsQuery(int delay) {
            return base.Channel.GetAllChampionshipsQuery(delay);
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Championship[]> GetAllChampionshipsQueryAsync(int delay) {
            return base.Channel.GetAllChampionshipsQueryAsync(delay);
        }
        
        public TicTacToe.Client.ServiceReference1.Game[] GetGamesQuery(int delay) {
            return base.Channel.GetGamesQuery(delay);
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Game[]> GetGamesQueryAsync(int delay) {
            return base.Channel.GetGamesQueryAsync(delay);
        }
        
        public TicTacToe.Client.ServiceReference1.Player[] GetPlayersQuery(int delay) {
            return base.Channel.GetPlayersQuery(delay);
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Player[]> GetPlayersQueryAsync(int delay) {
            return base.Channel.GetPlayersQueryAsync(delay);
        }
        
        public TicTacToe.Client.ServiceReference1.Championship[] GetChampionshipsByPlayerId(TicTacToe.Client.ServiceReference1.Player player) {
            return base.Channel.GetChampionshipsByPlayerId(player);
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Championship[]> GetChampionshipsByPlayerIdAsync(TicTacToe.Client.ServiceReference1.Player player) {
            return base.Channel.GetChampionshipsByPlayerIdAsync(player);
        }
        
        public TicTacToe.Client.ServiceReference1.Player[] GetPlayersByChampionshipId(int champId) {
            return base.Channel.GetPlayersByChampionshipId(champId);
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.Player[]> GetPlayersByChampionshipIdAsync(int champId) {
            return base.Channel.GetPlayersByChampionshipIdAsync(champId);
        }
        
        public string[] GetAllCities() {
            return base.Channel.GetAllCities();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllCitiesAsync() {
            return base.Channel.GetAllCitiesAsync();
        }
        
        public TicTacToe.Client.ServiceReference1.CustomChampionship GetNumOfChampionships(string city) {
            return base.Channel.GetNumOfChampionships(city);
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.CustomChampionship> GetNumOfChampionshipsAsync(string city) {
            return base.Channel.GetNumOfChampionshipsAsync(city);
        }
        
        public TicTacToe.Client.ServiceReference1.CustomPlayer GetNumOfGames(string name) {
            return base.Channel.GetNumOfGames(name);
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.CustomPlayer> GetNumOfGamesAsync(string name) {
            return base.Channel.GetNumOfGamesAsync(name);
        }
        
        public TicTacToe.Client.ServiceReference1.CustomAdvisorToPlayer[] GetAdvisorToPlayer(int gameId) {
            return base.Channel.GetAdvisorToPlayer(gameId);
        }
        
        public System.Threading.Tasks.Task<TicTacToe.Client.ServiceReference1.CustomAdvisorToPlayer[]> GetAdvisorToPlayerAsync(int gameId) {
            return base.Channel.GetAdvisorToPlayerAsync(gameId);
        }
        
        public int AddChampionship(System.DateTime start, System.DateTime end, string city, string imageUrl) {
            return base.Channel.AddChampionship(start, end, city, imageUrl);
        }
        
        public System.Threading.Tasks.Task<int> AddChampionshipAsync(System.DateTime start, System.DateTime end, string city, string imageUrl) {
            return base.Channel.AddChampionshipAsync(start, end, city, imageUrl);
        }
        
        public void UpdateChampionship(int id, System.DateTime start, System.DateTime end, string city, string imageUrl) {
            base.Channel.UpdateChampionship(id, start, end, city, imageUrl);
        }
        
        public System.Threading.Tasks.Task UpdateChampionshipAsync(int id, System.DateTime start, System.DateTime end, string city, string imageUrl) {
            return base.Channel.UpdateChampionshipAsync(id, start, end, city, imageUrl);
        }
        
        public void UpdatePlayerChampionships(TicTacToe.Client.ServiceReference1.Player player) {
            base.Channel.UpdatePlayerChampionships(player);
        }
        
        public System.Threading.Tasks.Task UpdatePlayerChampionshipsAsync(TicTacToe.Client.ServiceReference1.Player player) {
            return base.Channel.UpdatePlayerChampionshipsAsync(player);
        }
        
        public void AddPlayerToChamp(TicTacToe.Client.ServiceReference1.Player player, int champId) {
            base.Channel.AddPlayerToChamp(player, champId);
        }
        
        public System.Threading.Tasks.Task AddPlayerToChampAsync(TicTacToe.Client.ServiceReference1.Player player, int champId) {
            return base.Channel.AddPlayerToChampAsync(player, champId);
        }
        
        public void RemovePlayerToChampionship(TicTacToe.Client.ServiceReference1.Player player, int champId) {
            base.Channel.RemovePlayerToChampionship(player, champId);
        }
        
        public System.Threading.Tasks.Task RemovePlayerToChampionshipAsync(TicTacToe.Client.ServiceReference1.Player player, int champId) {
            return base.Channel.RemovePlayerToChampionshipAsync(player, champId);
        }
        
        public int AddGame(int champId, TicTacToe.Client.ServiceReference1.Player player1, TicTacToe.Client.ServiceReference1.Player player2, int boardSize) {
            return base.Channel.AddGame(champId, player1, player2, boardSize);
        }
        
        public System.Threading.Tasks.Task<int> AddGameAsync(int champId, TicTacToe.Client.ServiceReference1.Player player1, TicTacToe.Client.ServiceReference1.Player player2, int boardSize) {
            return base.Channel.AddGameAsync(champId, player1, player2, boardSize);
        }
        
        public void AddGameToPlayer(int gameId, TicTacToe.Client.ServiceReference1.Player player) {
            base.Channel.AddGameToPlayer(gameId, player);
        }
        
        public System.Threading.Tasks.Task AddGameToPlayerAsync(int gameId, TicTacToe.Client.ServiceReference1.Player player) {
            return base.Channel.AddGameToPlayerAsync(gameId, player);
        }
        
        public void AskPlayerConfirmation(int gameSize, TicTacToe.Client.ServiceReference1.Player player1, TicTacToe.Client.ServiceReference1.Player player2, bool confirmationRequired, int gameId) {
            base.Channel.AskPlayerConfirmation(gameSize, player1, player2, confirmationRequired, gameId);
        }
        
        public System.Threading.Tasks.Task AskPlayerConfirmationAsync(int gameSize, TicTacToe.Client.ServiceReference1.Player player1, TicTacToe.Client.ServiceReference1.Player player2, bool confirmationRequired, int gameId) {
            return base.Channel.AskPlayerConfirmationAsync(gameSize, player1, player2, confirmationRequired, gameId);
        }
        
        public void playerConfirmed(TicTacToe.Client.ServiceReference1.Player player1, TicTacToe.Client.ServiceReference1.Player player2) {
            base.Channel.playerConfirmed(player1, player2);
        }
        
        public System.Threading.Tasks.Task playerConfirmedAsync(TicTacToe.Client.ServiceReference1.Player player1, TicTacToe.Client.ServiceReference1.Player player2) {
            return base.Channel.playerConfirmedAsync(player1, player2);
        }
        
        public void removeClient() {
            base.Channel.removeClient();
        }
        
        public System.Threading.Tasks.Task removeClientAsync() {
            return base.Channel.removeClientAsync();
        }
        
        public void DelayResponse(int delay) {
            base.Channel.DelayResponse(delay);
        }
        
        public System.Threading.Tasks.Task DelayResponseAsync(int delay) {
            return base.Channel.DelayResponseAsync(delay);
        }
        
        public void CancelGame(TicTacToe.Client.ServiceReference1.Player player) {
            base.Channel.CancelGame(player);
        }
        
        public System.Threading.Tasks.Task CancelGameAsync(TicTacToe.Client.ServiceReference1.Player player) {
            return base.Channel.CancelGameAsync(player);
        }
    }
}
